cat << EOF > /etc/nova/nova.policy.yaml
# Custome rules
# edited
"is_owner_project": "role:owner_project and project_id:%(project_id)s"

# edited
"is_member": "role:member and user_id:%(user_id)s and project_id:%(project_id)s"

# edited
"is_owner_or_member": "rule:is_owner_project or rule:is_member"

# edited
"is_reader": "role:reader and project_id:%(project_id)s"

# Decides what is required for the 'is_admin:True' check to succeed.
# edited
"context_is_admin": "role:admin"

# Default rule for most non-Admin APIs.
# edited
"admin_or_owner": "is_admin:True or rule:is_owner_project"

# Default rule for most Admin APIs.
"admin_api": "is_admin:True"

# Reset the state of a given server
# POST  /servers/{server_id}/action (os-resetState)
# edited
"os_compute_api:os-admin-actions:reset_state": "rule:admin_api or rule:is_owner_or_member"

# Inject network information into the server
# POST  /servers/{server_id}/action (injectNetworkInfo)
# edited
"os_compute_api:os-admin-actions:inject_network_info": "rule:admin_api or rule:is_owner_or_member"

# Reset networking on a server
# POST  /servers/{server_id}/action (resetNetwork)
# edited
"os_compute_api:os-admin-actions:reset_network": "rule:admin_api or rule:is_owner_or_member"



# Create, list, update, and delete guest agent builds
#
# This is XenAPI driver specific. It is used to force the upgrade of
# the XenAPI guest agent on instance boot.
# GET  /os-agents
# POST  /os-agents
# PUT  /os-agents/{agent_build_id}
# DELETE  /os-agents/{agent_build_id}
# edited
"os_compute_api:os-agents": "rule:admin_api or rule:is_owner_project"



# Create an assisted volume snapshot
# POST  /os-assisted-volume-snapshots
# edited
"os_compute_api:os-assisted-volume-snapshots:create": "rule:admin_api or rule:is_owner_or_member"

# Delete an assisted volume snapshot
# DELETE  /os-assisted-volume-snapshots/{snapshot_id}
# edited
"os_compute_api:os-assisted-volume-snapshots:delete": "rule:admin_api or rule:is_owner_or_member"

# List port interfaces or show details of a port interface attached to
# a server
# GET  /servers/{server_id}/os-interface
# GET  /servers/{server_id}/os-interface/{port_id}
# edited
"os_compute_api:os-attach-interfaces": "rule:admin_or_owner or rule:is_member or rule:is_reader"

# Attach an interface to a server
# POST  /servers/{server_id}/os-interface
# edited
"os_compute_api:os-attach-interfaces:create": "rule:admin_or_owner or rule:is_member"

# Detach an interface from a server
# DELETE  /servers/{server_id}/os-interface/{port_id}
# edited
"os_compute_api:os-attach-interfaces:delete": "rule:admin_or_owner or rule:is_member"



# List detailed availability zone information with host information
# GET  /os-availability-zone/detail
# edited
"os_compute_api:os-availability-zone:detail": "rule:admin_api or rule:is_owner_project"



# Show console output for a server
# POST  /servers/{server_id}/action (os-getConsoleOutput)
# edited
"os_compute_api:os-console-output": "rule:admin_or_owner or rule:is_member or rule:is_reader"

# Create a console for a server instance
# POST  /servers/{server_id}/consoles
# edited
"os_compute_api:os-consoles:create": "rule:admin_or_owner or rule:is_member"

# Show console details for a server instance
# GET  /servers/{server_id}/consoles/{console_id}
# edited
"os_compute_api:os-consoles:show": "rule:admin_or_owner or rule:is_member or rule:is_reader"

# Delete a console for a server instance
# DELETE  /servers/{server_id}/consoles/{console_id}
# edited
"os_compute_api:os-consoles:delete": "rule:admin_or_owner or rule:is_member"

# List all consoles for a server instance
# GET  /servers/{server_id}/consoles
# edited
"os_compute_api:os-consoles:index": "rule:admin_or_owner or rule:is_owner_or_member"

# Create a back up of a server
# POST  /servers/{server_id}/action (createBackup)
# edited
"os_compute_api:os-create-backup": "rule:admin_or_owner or rule:is_owner_or_member"


# Return extended attributes for server.
#
# This rule will control the visibility for a set of servers
# attributes:
#
# - ``OS-EXT-SRV-ATTR:host`` - ``OS-EXT-SRV-ATTR:instance_name`` -
# ``OS-EXT-SRV-ATTR:reservation_id`` (since microversion 2.3) - ``OS-
# EXT-SRV-ATTR:launch_index`` (since microversion 2.3) - ``OS-EXT-SRV-
# ATTR:hostname`` (since microversion 2.3) - ``OS-EXT-SRV-
# ATTR:kernel_id`` (since microversion 2.3) - ``OS-EXT-SRV-
# ATTR:ramdisk_id`` (since microversion 2.3) - ``OS-EXT-SRV-
# ATTR:root_device_name`` (since microversion 2.3) - ``OS-EXT-SRV-
# ATTR:user_data`` (since microversion 2.3)
# GET  /servers/{id}
# GET  /servers/detail
# edited
"os_compute_api:os-extended-server-attributes": "rule:admin_api or rule:is_owner_or_member or rule:is_reader"



# Add flavor access to a tenant
# POST  /flavors/{flavor_id}/action (addTenantAccess)
# edited
"os_compute_api:os-flavor-access:add_tenant_access": "rule:admin_api or rule:is_owner_or_member"

# Remove flavor access from a tenant
# POST  /flavors/{flavor_id}/action (removeTenantAccess)
# edited
"os_compute_api:os-flavor-access:remove_tenant_access": "rule:admin_api or rule:is_owner_or_member"

# List flavor access information
#
# Allows access to the full list of tenants that have access to a
# flavor via an os-flavor-access API.
# GET  /flavors/{flavor_id}/os-flavor-access
# edited
"os_compute_api:os-flavor-access": "rule:admin_or_owner or rule:is_member or rule:is_reader"

# Show an extra spec for a flavor
# GET  /flavors/{flavor_id}/os-extra_specs/{flavor_extra_spec_key}
# edited
"os_compute_api:os-flavor-extra-specs:show": "rule:admin_or_owner or rule:is_member or rule:is_reader"

# Create extra specs for a flavor
# POST  /flavors/{flavor_id}/os-extra_specs/
# edited
"os_compute_api:os-flavor-extra-specs:create": "rule:admin_api or rule:is_owner_or_member"

# Update an extra spec for a flavor
# PUT  /flavors/{flavor_id}/os-extra_specs/{flavor_extra_spec_key}
# edited
"os_compute_api:os-flavor-extra-specs:update": "rule:admin_api or rule:is_owner_or_member"

# Delete an extra spec for a flavor
# DELETE  /flavors/{flavor_id}/os-extra_specs/{flavor_extra_spec_key}
# edited
"os_compute_api:os-flavor-extra-specs:delete": "rule:admin_api or rule:is_owner_or_member"


# Create and delete Flavors. Deprecated in Pike and will be removed in
# future release
# POST  /flavors
# DELETE  /flavors/{flavor_id}
# edited
"os_compute_api:os-flavor-manage": "rule:admin_api or rule:is_owner_or_member"


# Update a flavor
# PUT  /flavors/{flavor_id}
# edited
"os_compute_api:os-flavor-manage:update": "rule:admin_api or rule:is_owner_or_member"

# Delete a flavor
# DELETE  /flavors/{flavor_id}
# edited
"os_compute_api:os-flavor-manage:delete": "rule:os_compute_api:os-flavor-manage or rule:is_owner_or_member"



# List floating IP pools. This API is deprecated.
# GET  /os-floating-ip-pools
# edited
"os_compute_api:os-floating-ip-pools": "rule:admin_or_owner or rule:is_owner_or_member or rule:is_reader"


# List actions and show action details for a server.
# GET  /servers/{server_id}/os-instance-actions
# GET  /servers/{server_id}/os-instance-actions/{request_id}
# edited
"os_compute_api:os-instance-actions": "rule:admin_or_owner or rule:is_member or rule:is_reader"


# Show IP addresses details for a network label of a server
# GET  /servers/{server_id}/ips/{network_label}
# edited
"os_compute_api:ips:show": "rule:admin_or_owner or rule:is_member or rule:is_reader"

# List IP addresses that are assigned to a server
# GET  /servers/{server_id}/ips
# edited
"os_compute_api:ips:index": "rule:admin_or_owner or rule:is_member or rule:is_reader"

# List all keypairs
# GET  /os-keypairs
# edited
"os_compute_api:os-keypairs:index": "rule:admin_api or rule:is_owner_or_member"

# Create a keypair
# POST  /os-keypairs
# edited
"os_compute_api:os-keypairs:create": "rule:admin_api or rule:is_owner_or_member"

# Delete a keypair
# DELETE  /os-keypairs/{keypair_name}
# edited
"os_compute_api:os-keypairs:delete": "rule:admin_api or rule:is_owner_or_member"

# Show details of a keypair
# GET  /os-keypairs/{keypair_name}
# edited
"os_compute_api:os-keypairs:show": "rule:admin_api or rule:is_owner_or_member"


# Lock a server
# POST  /servers/{server_id}/action (lock)
# edited
"os_compute_api:os-lock-server:lock": "rule:admin_or_owner or rule:is_member"

# Unlock a server
# POST  /servers/{server_id}/action (unlock)
# edited
"os_compute_api:os-lock-server:unlock": "rule:admin_or_owner or rule:is_member"

# Unlock a server, regardless who locked the server.
#
# This check is performed only after the check os_compute_api:os-lock-
# server:unlock passes
# POST  /servers/{server_id}/action (unlock)
# edited
"os_compute_api:os-lock-server:unlock:unlock_override": "rule:admin_api or rule:is_owner_project"


# Create and delete a network, add and disassociate a network from a
# project.
#
# These APIs are only available with nova-network which is deprecated.
# POST  /os-networks
# POST  /os-networks/add
# DELETE  /os-networks/{network_id}
# POST  /os-networks/{network_id}/action (disassociate)
# edited
"os_compute_api:os-networks": "rule:admin_api or rule:is_owner_or_member"

# List networks for the project and show details for a network.
#
# These APIs are proxy calls to the Network service. These are all
# deprecated.
# GET  /os-networks
# GET  /os-networks/{network_id}
# edited
"os_compute_api:os-networks:view": "rule:admin_or_owner or rule:is_member or rule:is_reader"


# Pause a server
# POST  /servers/{server_id}/action (pause)
# edited
"os_compute_api:os-pause-server:pause": "rule:admin_or_owner or rule:is_member"

# Unpause a paused server
# POST  /servers/{server_id}/action (unpause)
# edited
"os_compute_api:os-pause-server:unpause": "rule:admin_or_owner or rule:is_member"

# Generate a URL to access remote server console
# POST  /servers/{server_id}/action (os-getRDPConsole)
# POST  /servers/{server_id}/action (os-getSerialConsole)
# POST  /servers/{server_id}/action (os-getSPICEConsole)
# POST  /servers/{server_id}/action (os-getVNCConsole)
# POST  /servers/{server_id}/remote-consoles
# edited
"os_compute_api:os-remote-consoles": "rule:admin_or_owner or rule:is_member"

# Rescue/unrescue a server
# POST  /servers/{server_id}/action (rescue)
# POST  /servers/{server_id}/action (unrescue)
# edited
"os_compute_api:os-rescue": "rule:admin_or_owner or rule:is_member"


# List, show, add, or remove security groups.
#
# APIs which are directly related to security groups resource are
# deprecated: Lists, shows information for, creates, updates and
# deletes security groups. Creates and deletes security group rules.
# All these APIs are deprecated.
#
# APIs which are related to server resource are not deprecated: Lists
# Security Groups for a server. Add Security Group to a server and
# remove security group from a server.
# GET  /os-security-groups
# GET  /os-security-groups/{security_group_id}
# POST  /os-security-groups
# PUT  /os-security-groups/{security_group_id}
# DELETE  /os-security-groups/{security_group_id}
# GET  /servers/{server_id}/os-security-groups
# POST  /servers/{server_id}/action (addSecurityGroup)
# POST  /servers/{server_id}/action (removeSecurityGroup)
# edited
"os_compute_api:os-security-groups": "rule:admin_or_owner or rule:is_member"

# Show the usage data for a server
# GET  /servers/{server_id}/diagnostics
# edited
"os_compute_api:os-server-diagnostics": "rule:admin_api or rule:is_owner_or_member or rule:is_reader"


# List all metadata of a server
# GET  /servers/{server_id}/metadata
# edited
"os_compute_api:server-metadata:index": "rule:admin_or_owner or rule:is_member or rule:is_reader"

# Show metadata for a server
# GET  /servers/{server_id}/metadata/{key}
# edited
"os_compute_api:server-metadata:show": "rule:admin_or_owner or rule:is_member or rule:is_reader"

# Create metadata for a server
# POST  /servers/{server_id}/metadata
# edited
"os_compute_api:server-metadata:create": "rule:admin_or_owner or ruel:is_member"

# Replace metadata for a server
# PUT  /servers/{server_id}/metadata
# edited
"os_compute_api:server-metadata:update_all": "rule:admin_or_owner or rule:is_member"

# Update metadata from a server
# PUT  /servers/{server_id}/metadata/{key}
# edited
"os_compute_api:server-metadata:update": "rule:admin_or_owner or rule:is_member"

# Delete metadata from a server
# DELETE  /servers/{server_id}/metadata/{key}
# edited
"os_compute_api:server-metadata:delete": "rule:admin_or_owner or rule:is_member"


# Delete all the server tags
# DELETE  /servers/{server_id}/tags
# edited
"os_compute_api:os-server-tags:delete_all": "rule:admin_or_owner or rule:is_member"

# List all tags for given server
# GET  /servers/{server_id}/tags
# edited
"os_compute_api:os-server-tags:index": "rule:admin_or_owner or rule:is_member or rule:is_reader"

# Replace all tags on specified server with the new set of tags.
# PUT  /servers/{server_id}/tags
# edited
"os_compute_api:os-server-tags:update_all": "rule:admin_or_owner or rule:is_member"

# Delete a single tag from the specified server
# DELETE  /servers/{server_id}/tags/{tag}
# edited
"os_compute_api:os-server-tags:delete": "rule:admin_or_owner or rule:is_member"

# Add a single tag to the server if server has no specified tag
# PUT  /servers/{server_id}/tags/{tag}
# edited
"os_compute_api:os-server-tags:update": "rule:admin_or_owner or rule:is_member"


# List all servers
# GET  /servers
# edited
"os_compute_api:servers:index": "@"

# List all servers with detailed information
# GET  /servers/detail
# edited
"os_compute_api:servers:detail": "rule:admin_or_owner or rule:is_member or rule:is_reader"


# Show a server
# GET  /servers/{server_id}
# edited
"os_compute_api:servers:show": "rule:admin_or_owner or rule:is_member or rule:is_reader"


# Create a server
# POST  /servers
# edited
"os_compute_api:servers:create": "rule:admin_or_owner or rule:is_member"


# Create a server with the requested volume attached to it
# POST  /servers
# edited
"os_compute_api:servers:create:attach_volume": "rule:admin_or_owner or rule:is_member"

# Create a server with the requested network attached to it
# POST  /servers
# edited
"os_compute_api:servers:create:attach_network": "rule:admin_or_owner or rule:is_member"

# Create a server with trusted image certificate IDs
# POST  /servers
# edited
"os_compute_api:servers:create:trusted_certs": "rule:admin_or_owner or rule:is_member"


# This rule controls the compute API validation behavior of creating a
# server with a flavor that has 0 disk, indicating the server should
# be volume-backed.
#
# For a flavor with disk=0, the root disk will be set to exactly the
# size of the image used to deploy the instance. However, in this case
# the filter_scheduler cannot select the compute host based on the
# virtual image size. Therefore, 0 should only be used for volume
# booted instances or for testing purposes.
#
# WARNING: It is a potential security exposure to enable this policy
# rule if users can upload their own images since repeated attempts to
# create a disk=0 flavor instance with a large image can exhaust the
# local disk of the compute (or shared storage cluster). See bug
# https://bugs.launchpad.net/nova/+bug/1739646 for details.
#
# This rule defaults to ``rule:admin_or_owner`` for backward
# compatibility but will be changed to default to ``rule:admin_api``
# in a subsequent release.
# POST  /servers
# edited
"os_compute_api:servers:create:zero_disk_flavor": "rule:admin_or_owner or rule:is_member"


# Delete a server
# DELETE  /servers/{server_id}
# edited
"os_compute_api:servers:delete": "rule:admin_or_owner or rule:is_member"

# Update a server
# PUT  /servers/{server_id}
# edited
"os_compute_api:servers:update": "rule:admin_or_owner or rule:is_member"

# Confirm a server resize
# POST  /servers/{server_id}/action (confirmResize)
# edited
"os_compute_api:servers:confirm_resize": "rule:admin_or_owner or rule:is_member"

# Revert a server resize
# POST  /servers/{server_id}/action (revertResize)
# edited
"os_compute_api:servers:revert_resize": "rule:admin_or_owner or rule:is_member"

# Reboot a server
# POST  /servers/{server_id}/action (reboot)
# edited
"os_compute_api:servers:reboot": "rule:admin_or_owner or rule:is_member"

# Resize a server
# POST  /servers/{server_id}/action (resize)
# edited
"os_compute_api:servers:resize": "rule:admin_or_owner or rule:is_member"

# Rebuild a server
# POST  /servers/{server_id}/action (rebuild)
# edited
"os_compute_api:servers:rebuild": "rule:admin_or_owner or rule:is_member"

# Rebuild a server with trusted image certificate IDs
# POST  /servers/{server_id}/action (rebuild)
# edited
"os_compute_api:servers:rebuild:trusted_certs": "rule:admin_or_owner or rule:is_member"

# Create an image from a server
# POST  /servers/{server_id}/action (createImage)
# edited
"os_compute_api:servers:create_image": "rule:admin_or_owner or rule:is_member"

# Create an image from a volume backed server
# POST  /servers/{server_id}/action (createImage)
# edited
"os_compute_api:servers:create_image:allow_volume_backed": "rule:admin_or_owner or rule:is_member"

# Start a server
# POST  /servers/{server_id}/action (os-start)
# edited
"os_compute_api:servers:start": "rule:admin_or_owner or rule:is_member"

# Stop a server
# POST  /servers/{server_id}/action (os-stop)
# edited
"os_compute_api:servers:stop": "rule:admin_or_owner or rule:is_member"

# Trigger crash dump in a server
# POST  /servers/{server_id}/action (trigger_crash_dump)
# edited
"os_compute_api:servers:trigger_crash_dump": "rule:admin_or_owner or rule:is_member"


# Shelve server
# POST  /servers/{server_id}/action (shelve)
# edited
"os_compute_api:os-shelve:shelve": "rule:admin_or_owner or rule:is_member"

# Unshelve (restore) shelved server
# POST  /servers/{server_id}/action (unshelve)
# edited
"os_compute_api:os-shelve:unshelve": "rule:admin_or_owner or rule:is_member"

# Shelf-offload (remove) server
# POST  /servers/{server_id}/action (shelveOffload)
# edited
"os_compute_api:os-shelve:shelve_offload": "rule:admin_api or rule:is_owner_or_member"

# Show usage statistics for a specific tenant
# GET  /os-simple-tenant-usage/{tenant_id}
# edited
"os_compute_api:os-simple-tenant-usage:show": "rule:admin_or_owner or rule:is_member or rule:is_reader"



# Resume suspended server
# POST  /servers/{server_id}/action (resume)
# edited
"os_compute_api:os-suspend-server:resume": "rule:admin_or_owner or rule:is_member"

# Suspend server
# POST  /servers/{server_id}/action (suspend)
# edited
"os_compute_api:os-suspend-server:suspend": "rule:admin_or_owner or rule:is_member"


# Create, list, show information for, and delete project networks.
#
# These APIs are proxy calls to the Network service. These are all
# deprecated.
# GET  /os-tenant-networks
# POST  /os-tenant-networks
# GET  /os-tenant-networks/{network_id}
# DELETE  /os-tenant-networks/{network_id}
# edited
"os_compute_api:os-tenant-networks": "rule:admin_or_owner or rule:is_member"


# Manage volumes for use with the Compute API.
#
# Lists, shows details, creates, and deletes volumes and snapshots.
# These APIs are proxy calls to the Volume service. These are all
# deprecated.
# GET  /os-volumes
# POST  /os-volumes
# GET  /os-volumes/detail
# GET  /os-volumes/{volume_id}
# DELETE  /os-volumes/{volume_id}
# GET  /os-snapshots
# POST  /os-snapshots
# GET  /os-snapshots/detail
# GET  /os-snapshots/{snapshot_id}
# DELETE  /os-snapshots/{snapshot_id}
# edited
"os_compute_api:os-volumes": "rule:admin_or_owner or rule:is_member"

# List volume attachments for an instance
# GET  /servers/{server_id}/os-volume_attachments
# edited
"os_compute_api:os-volumes-attachments:index": "rule:admin_or_owner or rule:is_member or rule:is_reader"

# Attach a volume to an instance
# POST  /servers/{server_id}/os-volume_attachments
# edited
"os_compute_api:os-volumes-attachments:create": "rule:admin_or_owner or rule:is_member"

# Show details of a volume attachment
# GET  /servers/{server_id}/os-volume_attachments/{volume_id}
# edited
"os_compute_api:os-volumes-attachments:show": "rule:admin_or_owner or rule:is_member or rule:is_reader"

# Update a volume attachment
# PUT  /servers/{server_id}/os-volume_attachments/{volume_id}
# edited
"os_compute_api:os-volumes-attachments:update": "rule:admin_api or rule:is_member"

# Detach a volume from an instance
# DELETE  /servers/{server_id}/os-volume_attachments/{volume_id}
# edited
"os_compute_api:os-volumes-attachments:delete": "rule:admin_or_owner or rule:is_member"



EOF



